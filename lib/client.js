// Generated by CoffeeScript 1.7.1
(function() {
  var Client, fs, needle, request, version, _;

  require('pkginfo')(module);

  version = this.version;

  _ = require('underscore');

  fs = require('fs');

  request = require('request');

  needle = require('needle');

  Client = (function() {
    var MAX_RETRIES;

    MAX_RETRIES = 5;

    function Client(company, product, options, defaultOptions, extraOptionsList) {
      var config_base, coreDefaultOptions, ext, keys, keystone, suffix, suffixes, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      if (options == null) {
        options = {};
      }
      if (defaultOptions == null) {
        defaultOptions = {};
      }
      if (extraOptionsList == null) {
        extraOptionsList = [];
      }
      coreDefaultOptions = {
        user_agent: this.version()
      };
      this.env = options.env;
      this.env || (this.env = process.env[company.toUpperCase() + '_' + product.toUpperCase() + '_ENV'] || process.env[product.toUpperCase() + '_ENV']);
      this.optionsList = ['scheme', 'host', 'port', 'user_agent'].concat(extraOptionsList);
      this.options = {};
      this.loadFromHash('params', options);
      this.loadFromConfig(company, product, options.config);
      this.loadFromConfig(company, product, process.env[company.toUpperCase() + '_' + product.toUpperCase() + '_CONFIG']);
      this.loadFromConfig(company, product, process.env[company.toUpperCase() + '_CONFIG']);
      this.loadFromEnv(company.toUpperCase() + '_' + product.toUpperCase());
      this.loadFromEnv(company.toUpperCase());
      suffixes = [];
      if (this.env != null) {
        suffixes.push("-" + this.env);
        suffixes.push("_" + this.env);
      }
      suffixes.push('');
      for (_i = 0, _len = suffixes.length; _i < _len; _i++) {
        suffix = suffixes[_i];
        _ref = ['.json'];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          ext = _ref[_j];
          _ref1 = ["" + company + "-" + product, "" + company + "_" + product, company];
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            config_base = _ref1[_k];
            this.loadFromConfig(company, product, "" + config_base + suffix + ext);
            this.loadFromConfig(company, product, "." + config_base + suffix + ext);
            this.loadFromConfig(company, product, "~/" + config_base + suffix + ext);
            this.loadFromConfig(company, product, "~/." + config_base + suffix + ext);
          }
        }
      }
      this.loadFromHash('defaults', defaultOptions);
      this.loadFromHash('defaults', coreDefaultOptions);
      keys = ["server", "tenant", "username", "password"];
      keystone = this.options["keystone"];
      if (keystone && _.intersection(keys, _.keys(keystone).length === 4)) {
        this.useKeystone = true;
      }
    }

    Client.prototype.version = function() {
      return "iron_core_node-" + version;
    };

    Client.prototype.setOption = function(source, name, value) {
      if ((this.options[name] == null) && (value != null)) {
        return this.options[name] = value;
      }
    };

    Client.prototype.loadFromHash = function(source, hash) {
      var option, _i, _len, _ref, _results;
      if (hash != null) {
        _ref = this.optionsList;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          option = _ref[_i];
          _results.push(this.setOption(source, option, hash[option]));
        }
        return _results;
      }
    };

    Client.prototype.loadFromEnv = function(prefix) {
      var option, _i, _len, _ref, _results;
      _ref = this.optionsList;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        _results.push(this.setOption('environment variable', option, process.env[prefix + '_' + option.toUpperCase()]));
      }
      return _results;
    };

    Client.prototype.getSubHash = function(hash, subs) {
      var sub, _i, _len;
      if (hash == null) {
        return null;
      }
      for (_i = 0, _len = subs.length; _i < _len; _i++) {
        sub = subs[_i];
        if (hash[sub] == null) {
          return null;
        }
        hash = hash[sub];
      }
      return hash;
    };

    Client.prototype.loadFromConfig = function(company, product, configFile) {
      var config, configData, realConfigFile;
      if (configFile != null) {
        realConfigFile = configFile.replace(/^~/, process.env.HOME);
        configData = '{}';
        try {
          configData = fs.readFileSync(realConfigFile);
        } catch (_error) {}
        config = JSON.parse(configData);
        if (this.env != null) {
          this.loadFromHash(configFile, this.getSubHash(config, [this.env, "" + company + "_" + product]));
          this.loadFromHash(configFile, this.getSubHash(config, [this.env, company, product]));
          this.loadFromHash(configFile, this.getSubHash(config, [this.env, product]));
          this.loadFromHash(configFile, this.getSubHash(config, [this.env, company]));
          this.loadFromHash(configFile, this.getSubHash(config, ["" + company + "_" + product, this.env]));
          this.loadFromHash(configFile, this.getSubHash(config, [company, product, this.env]));
          this.loadFromHash(configFile, this.getSubHash(config, [product, this.env]));
          this.loadFromHash(configFile, this.getSubHash(config, [company, this.env]));
          this.loadFromHash(configFile, this.getSubHash(config, [this.env]));
        }
        this.loadFromHash(configFile, this.getSubHash(config, ["" + company + "_" + product]));
        this.loadFromHash(configFile, this.getSubHash(config, [company, product]));
        this.loadFromHash(configFile, this.getSubHash(config, [product]));
        this.loadFromHash(configFile, this.getSubHash(config, [company]));
        return this.loadFromHash(configFile, this.getSubHash(config, []));
      }
    };

    Client.prototype.headers = function() {
      return {
        'User-Agent': this.options.user_agent
      };
    };

    Client.prototype.url = function() {
      return "" + this.options.scheme + "://" + this.options.host + ":" + this.options.port + "/";
    };

    Client.prototype.request = function(requestInfo, cb, retry) {
      var requestBind;
      if (retry == null) {
        retry = 0;
      }
      requestBind = _.bind(this.request, this);
      return request(requestInfo, function(error, response, body) {
        var delay;
        if (error && !response) {
          return cb(error, response, body);
        } else if (response.statusCode === 200) {
          return cb(error, response, body);
        } else {
          if (response.statusCode === 503 && retry < this.MAX_RETRIES) {
            delay = Math.pow(4, retry) * 100 * Math.random();
            return _.delay(requestBind, delay, requestInfo, cb, retry + 1);
          } else {
            return cb(error, response, body);
          }
        }
      });
    };

    Client.prototype.requestWrapper = function(url, method, params, cb) {
      var self;
      self = this;
      return this.getToken(function(token) {
        var headers, requestInfo;
        headers = _.extend(self.headers(), {
          Authorization: "OAuth " + token
        });
        requestInfo = {
          method: method,
          uri: self.url() + url,
          headers: headers,
          json: params
        };
        return self.request(requestInfo, cb);
      });
    };

    Client.prototype.get = function(method, params, cb) {
      return this.requestWrapper(method, "GET", params, cb);
    };

    Client.prototype.post = function(method, params, cb) {
      return this.requestWrapper(method, "POST", params, cb);
    };

    Client.prototype.put = function(method, params, cb) {
      return this.requestWrapper(method, "PUT", params, cb);
    };

    Client.prototype["delete"] = function(method, params, cb) {
      return this.requestWrapper(method, "DELETE", params, cb);
    };

    Client.prototype.patch = function(method, params, cb) {
      return this.requestWrapper(method, "PATCH", params, cb);
    };

    Client.prototype.parseResponse = function(error, response, body, cb, parseJson) {
      if (parseJson == null) {
        parseJson = true;
      }
      if (error) {
        return cb(error, null);
      } else if (response.statusCode === 200) {
        if (parseJson && typeof body === 'string') {
          body = JSON.parse(body);
        }
        return cb(null, body);
      } else {
        if (body instanceof String || typeof body === 'string') {
          return cb(new Error(body), null);
        } else if (body && body.msg) {
          return cb(new Error(body.msg), null);
        } else {
          return cb(new Error('Unknown error'), null);
        }
      }
    };

    Date.prototype.add = function(mseconds) {
      this.setTime(this.getTime() + mseconds);
      return this;
    };

    Client.prototype.getToken = function(cb) {
      var body, currentDate, self, uri;
      if (!this.useKeystone) {
        return cb(this.options.token);
      }
      currentDate = new Date();
      if ((this.token == null) || currentDate > this.expires) {
        uri = this.options["keystone"]["server"] + "tokens";
        body = {
          tenantName: this.options["keystone"]["tenant"],
          passwordCredentials: {
            username: this.options["keystone"]["username"],
            password: this.options["keystone"]["password"]
          }
        };
        self = this;
        return needle.post(uri, {auth: body}, {json: true}, function(err, resp) {
          var timespan, token;
          if (!err && resp.statusCode === 200) {
            token = resp.body["access"]["token"];
            timespan = Math.abs(new Date(token["expires"]) - new Date(token["issued_at"]));
            self.expires = currentDate.add(Math.round(timespan));
            self.token = token["id"];
          }
          return cb(self.token);
        });
      }
      return cb(this.token);
    };

    return Client;

  })();

  module.exports.Client = Client;

}).call(this);
